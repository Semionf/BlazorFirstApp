@page "/fetchdata"
@using BlazorUploadFile7.Shared
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.WebUtilities;
@inject HttpClient Http
@inject NavigationManager NavManager
@inject DAppState DState

<PageTitle>Weather forecast</PageTitle>
<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>
<p role="status">ApplicationState Counter Value: @ApplicationState.Counter</p>
<p role="status">Querystring Counter Value: @CounterQuery</p>
<p role="status">Dependency State Counter Value: @DState.Counter</p>
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Items="forecasts.AsQueryable()" @ref="grid" ResizableColumns>
    <PropertyColumn Property="f=>f.Date" Format="dddd, dd MMMM yyyy" Sortable="true" Align="Align.Left" />
    <PropertyColumn Property="f=>f.TemperatureC" Title="Temp (C)" Align="Align.Right" />
    <PropertyColumn Property="f=>f.TemperatureF" Title="Temp (F)" Sortable="true" Align="Align.Right" />
    <PropertyColumn Property="f=>f.Summary" Align="Align.Left">
        <ColumnOptions>
            <input />
        </ColumnOptions>
    </PropertyColumn>
    <TemplateColumn Align="Align.Left">
        <div>
            <span>
                Wow it's really @context.Summary today!
            </span>
        </div>
    </TemplateColumn>
</QuickGrid>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [CascadingParameter]
    public AppState ApplicationState { get; set; }
    public int CounterQuery { get; set; }



    private WeatherForecast[]? forecasts;
    QuickGrid<WeatherForecast>? grid;
    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");

        var QueryString = QueryHelpers.ParseQuery(NavManager.ToAbsoluteUri(NavManager.Uri).Query);
        if(QueryString.TryGetValue("counter", out var counter))
        {
            CounterQuery = Int32.Parse(counter);
        }
    }
}
